#include "cekeikon.h"

namespace cek {

void converte3d(M3d_<FLT> f, M3d_<GRY>& g)
{ assert(f.dims==3 && f.size[0]>0 && f.size[1]>0 && f.size[2]>0);
  f.convertTo(g, CV_8U, 255.0, 0.0); 
}

void converte3d(M3d_<GRY> g, M3d_<FLT>& f)
{ assert(g.dims==3 && g.size[0]>0 && g.size[1]>0 && g.size[2]>0);
  g.convertTo(f, CV_32F, 1.0/255.0, 0.0); 
}

int TamCol(int nc)
{ if (nc%4==0) return nc;
  else return 4*(nc/4+1);
}

void impAvi(M3d_<GRY> a, string nome)
{
static BYTE ImpAviGryHeader[]={
/*0000*/ 0x52,0x49,0x46,0x46,0x8C,0x05,0x00,0x00,/**/ 0x41,0x56,0x49,0x20,0x4C,0x49,0x53,0x54,/*RIFFå...*//*AVI LIST*/
                             /* tam arq - 8 */
/*0010*/ 0xDC,0x04,0x00,0x00,0x68,0x64,0x72,0x6C,/**/ 0x61,0x76,0x69,0x68,0x38,0x00,0x00,0x00,/*‹...hdrl*//*avih8...*/

/*0020*/ 0x90,0xD0,0x03,0x00,0x30,0x00,0x00,0x00,/**/ 0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,/* °..0...*//*........*/
         /* us per frame */  /* 48 = 2 x tamimg */
/*0030*/ 0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/**/ 0x01,0x00,0x00,0x00,0x18,0x00,0x00,0x00,/*........*//*........*/
         /* 3 frames      */                                              /* 24 = bytes */
/*0040*/ 0x05,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/**/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*........*//*........*/
         /* width nc */      /* height nl      */
/*0050*/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/**/ 0x4C,0x49,0x53,0x54,0x90,0x04,0x00,0x00,/*........*//*LISTê...*/

/*0060*/ 0x73,0x74,0x72,0x6C,0x73,0x74,0x72,0x68,/**/ 0x38,0x00,0x00,0x00,0x76,0x69,0x64,0x73,/*strlstrh*//*8...vids*/

/*0070*/ 0x44,0x49,0x42,0x20,0x00,0x00,0x00,0x00,/**/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*DIB ....*//*........*/

/*0080*/ 0xE8,0x03,0x00,0x00,0xD0,0x07,0x00,0x00,/**/ 0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*Ë...–...*//*........*/
                                                                          /* length ns */
/*0090*/ 0x18,0x00,0x00,0x00,0x84,0x03,0x00,0x00,/**/ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*....Ñ...*//*........*/
         /* 24 = tamimg */
/*00A0*/ 0x05,0x00,0x03,0x00,0x73,0x74,0x72,0x66,/**/ 0x28,0x04,0x00,0x00,0x28,0x00,0x00,0x00,/*....strf*//*(...(...*/
         /*nc*/    /*nl*/
/*00B0*/ 0x05,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/**/ 0x01,0x00,0x08,0x00,0x00,0x00,0x00,0x00,/*........*//*........*/
         /*width nc*/        /*height nl*/         /*NrPlanes*//*Bits/pix*//*compression*/
/*00C0*/ 0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/**/ 0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,/*........*//*........*/
         /* 24=bytes tamimg */                                            /*npal           */
/*00D0*/ 0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,/**/ 0x01,0x01,0x01,0x00,0x02,0x02,0x02,0x00,/*........*//*........*/
                           /*Inicio do palette */
/*00E0*/ 0x03,0x03,0x03,0x00,0x04,0x04,0x04,0x00,/**/ 0x05,0x05,0x05,0x00,0x06,0x06,0x06,0x00,/*........*//*........*/
/*00F0*/ 0x07,0x07,0x07,0x00,0x08,0x08,0x08,0x00,/**/ 0x09,0x09,0x09,0x00,0x0A,0x0A,0x0A,0x00,/*........*//*........*/
/*0100*/ 0x0B,0x0B,0x0B,0x00,0x0C,0x0C,0x0C,0x00,/**/ 0x0D,0x0D,0x0D,0x00,0x0E,0x0E,0x0E,0x00,/*........*//*........*/
/*0110*/ 0x0F,0x0F,0x0F,0x00,0x10,0x10,0x10,0x00,/**/ 0x11,0x11,0x11,0x00,0x12,0x12,0x12,0x00,/*........*//*........*/
/*0120*/ 0x13,0x13,0x13,0x00,0x14,0x14,0x14,0x00,/**/ 0x15,0x15,0x15,0x00,0x16,0x16,0x16,0x00,/*........*//*........*/
/*0130*/ 0x17,0x17,0x17,0x00,0x18,0x18,0x18,0x00,/**/ 0x19,0x19,0x19,0x00,0x1A,0x1A,0x1A,0x00,/*........*//*........*/
/*0140*/ 0x1B,0x1B,0x1B,0x00,0x1C,0x1C,0x1C,0x00,/**/ 0x1D,0x1D,0x1D,0x00,0x1E,0x1E,0x1E,0x00,/*........*//*........*/
/*0150*/ 0x1F,0x1F,0x1F,0x00,0x20,0x20,0x20,0x00,/**/ 0x21,0x21,0x21,0x00,0x22,0x22,0x22,0x00,/*....   .*//*!!!.""".*/
/*0160*/ 0x23,0x23,0x23,0x00,0x24,0x24,0x24,0x00,/**/ 0x25,0x25,0x25,0x00,0x26,0x26,0x26,0x00,/*###.$$$.*//*%%%.&&&.*/
/*0170*/ 0x27,0x27,0x27,0x00,0x28,0x28,0x28,0x00,/**/ 0x29,0x29,0x29,0x00,0x2A,0x2A,0x2A,0x00,/*'''.(((.*//*))).***.*/
/*0180*/ 0x2B,0x2B,0x2B,0x00,0x2C,0x2C,0x2C,0x00,/**/ 0x2D,0x2D,0x2D,0x00,0x2E,0x2E,0x2E,0x00,/*+++.,,,.*//*---.....*/
/*0190*/ 0x2F,0x2F,0x2F,0x00,0x30,0x30,0x30,0x00,/**/ 0x31,0x31,0x31,0x00,0x32,0x32,0x32,0x00,/*///.000.*//*111.222.*/
/*01A0*/ 0x33,0x33,0x33,0x00,0x34,0x34,0x34,0x00,/**/ 0x35,0x35,0x35,0x00,0x36,0x36,0x36,0x00,/*333.444.*//*555.666.*/
/*01B0*/ 0x37,0x37,0x37,0x00,0x38,0x38,0x38,0x00,/**/ 0x39,0x39,0x39,0x00,0x3A,0x3A,0x3A,0x00,/*777.888.*//*999.:::.*/
/*01C0*/ 0x3B,0x3B,0x3B,0x00,0x3C,0x3C,0x3C,0x00,/**/ 0x3D,0x3D,0x3D,0x00,0x3E,0x3E,0x3E,0x00,/*;;;.<<<.*//*===.>>>.*/
/*01D0*/ 0x3F,0x3F,0x3F,0x00,0x40,0x40,0x40,0x00,/**/ 0x41,0x41,0x41,0x00,0x42,0x42,0x42,0x00,/*???.@@@.*//*AAA.BBB.*/
/*01E0*/ 0x43,0x43,0x43,0x00,0x44,0x44,0x44,0x00,/**/ 0x45,0x45,0x45,0x00,0x46,0x46,0x46,0x00,/*CCC.DDD.*//*EEE.FFF.*/
/*01F0*/ 0x47,0x47,0x47,0x00,0x48,0x48,0x48,0x00,/**/ 0x49,0x49,0x49,0x00,0x4A,0x4A,0x4A,0x00,/*GGG.HHH.*//*III.JJJ.*/
/*0200*/ 0x4B,0x4B,0x4B,0x00,0x4C,0x4C,0x4C,0x00,/**/ 0x4D,0x4D,0x4D,0x00,0x4E,0x4E,0x4E,0x00,/*KKK.LLL.*//*MMM.NNN.*/
/*0210*/ 0x4F,0x4F,0x4F,0x00,0x50,0x50,0x50,0x00,/**/ 0x51,0x51,0x51,0x00,0x52,0x52,0x52,0x00,/*OOO.PPP.*//*QQQ.RRR.*/
/*0220*/ 0x53,0x53,0x53,0x00,0x54,0x54,0x54,0x00,/**/ 0x55,0x55,0x55,0x00,0x56,0x56,0x56,0x00,/*SSS.TTT.*//*UUU.VVV.*/
/*0230*/ 0x57,0x57,0x57,0x00,0x58,0x58,0x58,0x00,/**/ 0x59,0x59,0x59,0x00,0x5A,0x5A,0x5A,0x00,/*WWW.XXX.*//*YYY.ZZZ.*/
/*0240*/ 0x5B,0x5B,0x5B,0x00,0x5C,0x5C,0x5C,0x00,/**/ 0x5D,0x5D,0x5D,0x00,0x5E,0x5E,0x5E,0x00,/*[[[.\\\.*//*]]].^^^.*/
/*0250*/ 0x5F,0x5F,0x5F,0x00,0x60,0x60,0x60,0x00,/**/ 0x61,0x61,0x61,0x00,0x62,0x62,0x62,0x00,/*___.```.*//*aaa.bbb.*/
/*0260*/ 0x63,0x63,0x63,0x00,0x64,0x64,0x64,0x00,/**/ 0x65,0x65,0x65,0x00,0x66,0x66,0x66,0x00,/*ccc.ddd.*//*eee.fff.*/
/*0270*/ 0x67,0x67,0x67,0x00,0x68,0x68,0x68,0x00,/**/ 0x69,0x69,0x69,0x00,0x6A,0x6A,0x6A,0x00,/*ggg.hhh.*//*iii.jjj.*/
/*0280*/ 0x6B,0x6B,0x6B,0x00,0x6C,0x6C,0x6C,0x00,/**/ 0x6D,0x6D,0x6D,0x00,0x6E,0x6E,0x6E,0x00,/*kkk.lll.*//*mmm.nnn.*/
/*0290*/ 0x6F,0x6F,0x6F,0x00,0x70,0x70,0x70,0x00,/**/ 0x71,0x71,0x71,0x00,0x72,0x72,0x72,0x00,/*ooo.ppp.*//*qqq.rrr.*/
/*02A0*/ 0x73,0x73,0x73,0x00,0x74,0x74,0x74,0x00,/**/ 0x75,0x75,0x75,0x00,0x76,0x76,0x76,0x00,/*sss.ttt.*//*uuu.vvv.*/
/*02B0*/ 0x77,0x77,0x77,0x00,0x78,0x78,0x78,0x00,/**/ 0x79,0x79,0x79,0x00,0x7A,0x7A,0x7A,0x00,/*www.xxx.*//*yyy.zzz.*/
/*02C0*/ 0x7B,0x7B,0x7B,0x00,0x7C,0x7C,0x7C,0x00,/**/ 0x7D,0x7D,0x7D,0x00,0x7E,0x7E,0x7E,0x00,/*{{{.|||.*//*}}}.~~~.*/
/*02D0*/ 0x7F,0x7F,0x7F,0x00,0x80,0x80,0x80,0x00,/**/ 0x81,0x81,0x81,0x00,0x82,0x82,0x82,0x00,/*.ÄÄÄ.*//*ÅÅÅ.ÇÇÇ.*/
/*02E0*/ 0x83,0x83,0x83,0x00,0x84,0x84,0x84,0x00,/**/ 0x85,0x85,0x85,0x00,0x86,0x86,0x86,0x00,/*ÉÉÉ.ÑÑÑ.*//*ÖÖÖ.ÜÜÜ.*/
/*02F0*/ 0x87,0x87,0x87,0x00,0x88,0x88,0x88,0x00,/**/ 0x89,0x89,0x89,0x00,0x8A,0x8A,0x8A,0x00,/*ááá.ààà.*//*âââ.äää.*/
/*0300*/ 0x8B,0x8B,0x8B,0x00,0x8C,0x8C,0x8C,0x00,/**/ 0x8D,0x8D,0x8D,0x00,0x8E,0x8E,0x8E,0x00,/*ããã.ååå.*//*ççç.ééé.*/
/*0310*/ 0x8F,0x8F,0x8F,0x00,0x90,0x90,0x90,0x00,/**/ 0x91,0x91,0x91,0x00,0x92,0x92,0x92,0x00,/*èèè.êêê.*//*ëëë.ííí.*/
/*0320*/ 0x93,0x93,0x93,0x00,0x94,0x94,0x94,0x00,/**/ 0x95,0x95,0x95,0x00,0x96,0x96,0x96,0x00,/*ììì.îîî.*//*ïïï.ñññ.*/
/*0330*/ 0x97,0x97,0x97,0x00,0x98,0x98,0x98,0x00,/**/ 0x99,0x99,0x99,0x00,0x9A,0x9A,0x9A,0x00,/*óóó.òòò.*//*ôôô.ööö.*/
/*0340*/ 0x9B,0x9B,0x9B,0x00,0x9C,0x9C,0x9C,0x00,/**/ 0x9D,0x9D,0x9D,0x00,0x9E,0x9E,0x9E,0x00,/*õõõ.úúú.*//*ùùù.ûûû.*/
/*0350*/ 0x9F,0x9F,0x9F,0x00,0xA0,0xA0,0xA0,0x00,/**/ 0xA1,0xA1,0xA1,0x00,0xA2,0xA2,0xA2,0x00,/*üüü.†††.*//*°°°.¢¢¢.*/
/*0360*/ 0xA3,0xA3,0xA3,0x00,0xA4,0xA4,0xA4,0x00,/**/ 0xA5,0xA5,0xA5,0x00,0xA6,0xA6,0xA6,0x00,/*£££.§§§.*//*•••.¶¶¶.*/
/*0370*/ 0xA7,0xA7,0xA7,0x00,0xA8,0xA8,0xA8,0x00,/**/ 0xA9,0xA9,0xA9,0x00,0xAA,0xAA,0xAA,0x00,/*ßßß.®®®.*//*©©©.™™™.*/
/*0380*/ 0xAB,0xAB,0xAB,0x00,0xAC,0xAC,0xAC,0x00,/**/ 0xAD,0xAD,0xAD,0x00,0xAE,0xAE,0xAE,0x00,/*´´´.¨¨¨.*//*≠≠≠.ÆÆÆ.*/
/*0390*/ 0xAF,0xAF,0xAF,0x00,0xB0,0xB0,0xB0,0x00,/**/ 0xB1,0xB1,0xB1,0x00,0xB2,0xB2,0xB2,0x00,/*ØØØ.∞∞∞.*//*±±±.≤≤≤.*/
/*03A0*/ 0xB3,0xB3,0xB3,0x00,0xB4,0xB4,0xB4,0x00,/**/ 0xB5,0xB5,0xB5,0x00,0xB6,0xB6,0xB6,0x00,/*≥≥≥.¥¥¥.*//*µµµ.∂∂∂.*/
/*03B0*/ 0xB7,0xB7,0xB7,0x00,0xB8,0xB8,0xB8,0x00,/**/ 0xB9,0xB9,0xB9,0x00,0xBA,0xBA,0xBA,0x00,/*∑∑∑.∏∏∏.*//*πππ.∫∫∫.*/
/*03C0*/ 0xBB,0xBB,0xBB,0x00,0xBC,0xBC,0xBC,0x00,/**/ 0xBD,0xBD,0xBD,0x00,0xBE,0xBE,0xBE,0x00,/*ªªª.ººº.*//*ΩΩΩ.æææ.*/
/*03D0*/ 0xBF,0xBF,0xBF,0x00,0xC0,0xC0,0xC0,0x00,/**/ 0xC1,0xC1,0xC1,0x00,0xC2,0xC2,0xC2,0x00,/*øøø.¿¿¿.*//*¡¡¡.¬¬¬.*/
/*03E0*/ 0xC3,0xC3,0xC3,0x00,0xC4,0xC4,0xC4,0x00,/**/ 0xC5,0xC5,0xC5,0x00,0xC6,0xC6,0xC6,0x00,/*√√√.ƒƒƒ.*//*≈≈≈.∆∆∆.*/
/*03F0*/ 0xC7,0xC7,0xC7,0x00,0xC8,0xC8,0xC8,0x00,/**/ 0xC9,0xC9,0xC9,0x00,0xCA,0xCA,0xCA,0x00,/*«««.»»».*//*……….   .*/
/*0400*/ 0xCB,0xCB,0xCB,0x00,0xCC,0xCC,0xCC,0x00,/**/ 0xCD,0xCD,0xCD,0x00,0xCE,0xCE,0xCE,0x00,/*ÀÀÀ.ÃÃÃ.*//*ÕÕÕ.ŒŒŒ.*/
/*0410*/ 0xCF,0xCF,0xCF,0x00,0xD0,0xD0,0xD0,0x00,/**/ 0xD1,0xD1,0xD1,0x00,0xD2,0xD2,0xD2,0x00,/*œœœ.–––.*//*———.“““.*/
/*0420*/ 0xD3,0xD3,0xD3,0x00,0xD4,0xD4,0xD4,0x00,/**/ 0xD5,0xD5,0xD5,0x00,0xD6,0xD6,0xD6,0x00,/*”””.‘‘‘.*//*’’’.÷÷÷.*/
/*0430*/ 0xD7,0xD7,0xD7,0x00,0xD8,0xD8,0xD8,0x00,/**/ 0xD9,0xD9,0xD9,0x00,0xDA,0xDA,0xDA,0x00,/*◊◊◊.ÿÿÿ.*//*ŸŸŸ.⁄⁄⁄.*/
/*0440*/ 0xDB,0xDB,0xDB,0x00,0xDC,0xDC,0xDC,0x00,/**/ 0xDD,0xDD,0xDD,0x00,0xDE,0xDE,0xDE,0x00,/*€€€.‹‹‹.*//*›››.ﬁﬁﬁ.*/
/*0450*/ 0xDF,0xDF,0xDF,0x00,0xE0,0xE0,0xE0,0x00,/**/ 0xE1,0xE1,0xE1,0x00,0xE2,0xE2,0xE2,0x00,/*ﬂﬂﬂ.‡‡‡.*//*···.‚‚‚.*/
/*0460*/ 0xE3,0xE3,0xE3,0x00,0xE4,0xE4,0xE4,0x00,/**/ 0xE5,0xE5,0xE5,0x00,0xE6,0xE6,0xE6,0x00,/*„„„.‰‰‰.*//*ÂÂÂ.ÊÊÊ.*/
/*0470*/ 0xE7,0xE7,0xE7,0x00,0xE8,0xE8,0xE8,0x00,/**/ 0xE9,0xE9,0xE9,0x00,0xEA,0xEA,0xEA,0x00,/*ÁÁÁ.ËËË.*//*ÈÈÈ.ÍÍÍ.*/
/*0480*/ 0xEB,0xEB,0xEB,0x00,0xEC,0xEC,0xEC,0x00,/**/ 0xED,0xED,0xED,0x00,0xEE,0xEE,0xEE,0x00,/*ÎÎÎ.ÏÏÏ.*//*ÌÌÌ.ÓÓÓ.*/
/*0490*/ 0xEF,0xEF,0xEF,0x00,0xF0,0xF0,0xF0,0x00,/**/ 0xF1,0xF1,0xF1,0x00,0xF2,0xF2,0xF2,0x00,/*ÔÔÔ..*//*ÒÒÒ.ÚÚÚ.*/
/*04A0*/ 0xF3,0xF3,0xF3,0x00,0xF4,0xF4,0xF4,0x00,/**/ 0xF5,0xF5,0xF5,0x00,0xF6,0xF6,0xF6,0x00,/*ÛÛÛ.ÙÙÙ.*//*ııı.ˆˆˆ.*/
/*04B0*/ 0xF7,0xF7,0xF7,0x00,0xF8,0xF8,0xF8,0x00,/**/ 0xF9,0xF9,0xF9,0x00,0xFA,0xFA,0xFA,0x00,/*˜˜˜.¯¯¯.*//*˘˘˘.˙˙˙.*/
/*04C0*/ 0xFB,0xFB,0xFB,0x00,0xFC,0xFC,0xFC,0x00,/**/ 0xFD,0xFD,0xFD,0x00,0xFE,0xFE,0xFE,0x00,/*˚˚˚.¸¸¸.*//*˝˝˝.˛˛˛.*/
/*04D0*/ 0xFF,0xFF,0xFF,0x00,0x73,0x74,0x72,0x6E,/**/ 0x14,0x00,0x00,0x00,0x41,0x56,0x49,0x20,/*ˇˇˇ.strn*//*....AVI */
          /* fim do palete*/
/*04E0*/ 0x56,0x69,0x64,0x65,0x6F,0x20,0x53,0x74,/**/ 0x72,0x65,0x61,0x6D,0x20,0x23,0x31,0x00,/*Video St*//*ream #1.*/
/*04F0*/ 0x4C,0x49,0x53,0x54,0x64,0x00,0x00,0x00,/**/ 0x6D,0x6F,0x76,0x69                     /*LISTd...*//*movi*/
};

static BYTE ImpAviGryFrameHeader[]={
  0x30,0x30,0x64,0x62, /*00db*/
  0x18,0x00,0x00,0x00
};

static BYTE ImpAviGryIDXHeader[]={
  0x69,0x64,0x78,0x31, /*idx1*/
  0x30,0x00,0x00,0x00
};

static BYTE ImpAviGryIDX[]={
  0x30,0x30,0x64,0x62,/**/ 0x10,0x00,0x00,0x00,0x04,0x00,0x00,0x00,/*00db*//*........*/
  /* id ...........*/      /* type - flags  */ /* offset        */
  0x18,0x00,0x00,0x00
  /* length */
};

  if (!(a.dims==3 && a.size[0]>0 && a.size[1]>0 && a.size[2]>0))
    erro("Erro ImpAvi(I3DGRY) - Imagem nula ",nome);

  FILE* arq=fopen(nome.c_str(),"wb");
  if (arq==NULL) erro("Erro ImpAvi(I3DGRY) - abertura de ",nome);
  if (setvbuf(arq,NULL,_IOFBF,maxbuf)!=0)
    erro("Erro ImpAvi(I3DGRY) - Faltou memoria setvbuf");

  DWORD* dw=(DWORD *)ImpAviGryHeader;
  WORD* wd=(WORD *)ImpAviGryHeader;
  int tamcol=TamCol(a.size[2]);
  int tamimg=a.size[1]*tamcol;
  //int tami3d=a.ns()*tamimg;
  int tamarq=1264+12+a.size[0]*(a.size[1]*tamcol+8)+8+16*a.size[0];

  dw[0x4/4]=tamarq-8;
  dw[0x24/4]=2*tamimg;
  dw[0x30/4]=a.size[0];
  dw[0x3c/4]=tamimg;
  dw[0x40/4]=a.size[2];
  dw[0x44/4]=a.size[1];
  dw[0x8c/4]=a.size[0];
  dw[0x90/4]=tamimg;
  wd[0xa0/2]=a.size[2];
  wd[0xa2/2]=a.size[1];
  dw[0xb0/4]=a.size[2];
  dw[0xb4/4]=a.size[1];
  dw[0xc0/4]=tamimg;
  dw[0x4f4/4]=a.size[0]*(a.size[1]*tamcol+8)+4;
  fwrite(&ImpAviGryHeader,sizeof(ImpAviGryHeader),1,arq);

  dw=(DWORD *)ImpAviGryFrameHeader;
  dw[0x4/4]=tamimg;

  BYTE *buf=NULL;
  try { buf=new BYTE[tamcol]; }
  catch (bad_alloc) { erro("Erro ImpAvi - Falta memoria"); }

  for (int c=0; c<tamcol; c++) buf[c]=0;
  for (int f=0; f<a.size[0]; f++) {
    fwrite(&ImpAviGryFrameHeader,sizeof(ImpAviGryFrameHeader),1,arq);
    for (int l=a.size[1]-1; l>=0; l--) {
      for (int c=0; c<a.size[2]; c++) buf[c]=a(f,l,c);
      fwrite(buf,tamcol,1,arq);
    }
  }

  dw=(DWORD *)ImpAviGryIDXHeader;
  dw[0x4/4]=a.size[0]*16;
  fwrite(&ImpAviGryIDXHeader,sizeof(ImpAviGryIDXHeader),1,arq);

  dw=(DWORD *)ImpAviGryIDX;
  dw[0xc/4]=tamimg;
  for (int f=0; f<a.size[0]; f++) {
    dw[0x8/4]=4+f*(tamimg+8);
    fwrite(&ImpAviGryIDX,sizeof(ImpAviGryIDX),1,arq);
  }
  fclose(arq);
}

void leAvi(M3d_<GRY>& a, string nome)
{ const DWORD bufsize=4096;
  BYTE buf[bufsize];
  DWORD* dw;
  //WORD* wd;
  char* ch;

  struct CHUNK {
    char id[4];
    DWORD size;
  } chunk;

  char ident[4];

  FILE* arq=fopen(nome.c_str(),"rb");
  if (arq==NULL) erro("Erro LeAvi(I3DGRY) - Abertura de ",nome);
  if (setvbuf(arq,NULL,_IOFBF,maxbuf)!=0)
    erro("Erro LeAvi(I3DGRY) - Falta memoria setvbuf");

  fread(&chunk,sizeof(chunk),1,arq);
  if (strncmp(chunk.id,"RIFF",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-RIFF");
  fread(&ident,sizeof(ident),1,arq);
  if (strncmp(ident,"AVI ",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-AVI_");

  fread(&chunk,sizeof(chunk),1,arq);
  while (strncmp(chunk.id,"JUNK",4)==0) {
    if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
    fread(buf,chunk.size,1,arq);
    fread(&chunk,sizeof(chunk),1,arq);
  }
  if (strncmp(chunk.id,"LIST",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-LIST");
  fread(ident,sizeof(ident),1,arq);
  if (strncmp(ident,"hdrl",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-hdrl");

  fread(&chunk,sizeof(chunk),1,arq);
  while (strncmp(chunk.id,"JUNK",4)==0) {
    if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
    fread(buf,chunk.size,1,arq);
    fread(&chunk,sizeof(chunk),1,arq);
  }
  if (strncmp(chunk.id,"avih",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-avih");
  if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
  fread(buf,chunk.size,1,arq);
  dw=(DWORD*)buf;
  int ns=dw[(0x30-0x20)/4];
  int nc=dw[(0x40-0x20)/4];
  int nl=dw[(0x44-0x20)/4];

  fread(&chunk,sizeof(chunk),1,arq);
  while (strncmp(chunk.id,"JUNK",4)==0) {
    if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
    fread(buf,chunk.size,1,arq);
    fread(&chunk,sizeof(chunk),1,arq);
  }
  if (strncmp(chunk.id,"LIST",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-LIST");
  fread(ident,sizeof(ident),1,arq);
  if (strncmp(ident,"strl",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-strl");

  fread(&chunk,sizeof(chunk),1,arq);
  while (strncmp(chunk.id,"JUNK",4)==0) {
    if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
    fread(buf,chunk.size,1,arq);
    fread(&chunk,sizeof(chunk),1,arq);
  }
  if (strncmp(chunk.id,"strh",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-strh");
  if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
  fread(buf,chunk.size,1,arq);
  ch=(char*)buf;
  if (strncmp(ch,"vidsDIB ",8)!=0) erro("Erro LeAvi(I3DGRY): Nao-vidsDIB_");

  fread(&chunk,sizeof(chunk),1,arq);
  while (strncmp(chunk.id,"JUNK",4)==0) {
    if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
    fread(buf,chunk.size,1,arq);
    fread(&chunk,sizeof(chunk),1,arq);
  }
  if (strncmp(chunk.id,"strf",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-strf");
  if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
  fread(buf,chunk.size,1,arq);
  dw=(DWORD*)buf;
  if (dw[(0xb8-0xac)/4]!=0x00080001) erro("Erro: Tipo AVI");
  if (dw[(0xbc-0xac)/4]!=0x0) erro("Erro: Tipo compressao");
  DWORD npal=dw[(0xcc-0xac)/4];
  if (4*npal+0x28!=chunk.size) erro("Erro: Tamanho palette invalido");
  vector<BYTE> gray(npal);
  for (DWORD i=0; i<npal; i++)
    gray[i]=(buf[4*i+0xd4-0xac]+buf[4*i+0xd5-0xac]+buf[4*i+0xd6-0xac]+1)/3;

  fread(&chunk,sizeof(chunk),1,arq);
  while (strncmp(chunk.id,"JUNK",4)==0 || strncmp(chunk.id,"strn",4)==0) {
    if (chunk.size>bufsize) erro("Erro: Chunk muito grande");
    fread(buf,chunk.size,1,arq);
    fread(&chunk,sizeof(chunk),1,arq);
  }
  if (strncmp(chunk.id,"LIST",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-LIST");
  fread(&ident,sizeof(ident),1,arq);
  if (strncmp(ident,"movi",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-movi");

  int tam1[]={ns,nl,nc}; a.create(3,tam1);
  int tamcol=TamCol(nc);
  DWORD tamimg=a.size[1]*tamcol;
  vector<BYTE> vet(tamimg);

  for (int s=0; s<ns; s++) {
    fread(&chunk,sizeof(chunk),1,arq);
    if (strncmp(chunk.id,"00db",4)!=0) erro("Erro LeAvi(I3DGRY): Nao-00db");
    if (chunk.size!=tamimg) erro("Erro LeAvi(I3DGRY): tamimg!=chunk.size");
    if (feof(arq)) erro("Erro: Fim de arquivo inesperado");
    fread(vet.data(),tamimg,1,arq);
    for (int l=0; l<nl; l++)
      for (int c=0; c<nc; c++)
        a(s,l,c)=gray[vet[c+(nl-l-1)*tamcol]];
  }
  fclose(arq);
}

void impAvi(M3d_<FLT> a, string nome)
{ M3d_<GRY> g;
  converte3d(a,g);
  impAvi(g,nome);
}

void leAvi(M3d_<FLT>& a, string nome)
{ M3d_<GRY> g;
  leAvi(g,nome);
  converte3d(g,a);
}

void imp3dTxt(M3d_<FLT> a, string nome)
{ if (a.dims!=3) erro("Erro");
  FILE* arq=fopen(nome.c_str(),"wt");
  for (int s=0; s<a.size[0]; s++) {
    for (int l=0; l<a.size[1]; l++)
      for (int c=0; c<a.size[2]; c++) 
        fprintf(arq,"%9.5f ",a(s,l,c));
    fprintf(arq,"\n");
  }
  fprintf(arq,"\n");
  fclose(arq);
}

void le3dImg(M3d_<FLT>& a, string nome)
{ FILE* arq=fopen(nome.c_str(),"rb");
  if (arq==NULL) erro("Erro le3dImg - Abertura de ",nome);
  if (setvbuf(arq,NULL,_IOFBF,maxbuf)!=0)
    erro("Erro le3dImg - Faltou memoria setvbuf");

  char id[9]; fread(id,1,8,arq); id[7]=0;
  if (string(id)!="I3DFLT*")
    erro("Erro le3dImg - Formato incorreta 1");
  int nsv; fread(&nsv,4,1,arq);

  for (int i=0; i<nsv; ++i) {
    bool correto=true;
    char st[9]; fread(st,1,8,arq); st[7]=0;
    if (string(st)!="IMGFLT*") correto=false;

    int tam; fread(&tam,4,1,arq);
    if (tam!=sizeof(FLT)) correto=false;
    if (!correto) erro("Erro le3dImg - Formato incorreta 2");

    int nll,ncl;
    fread(&nll,4,1,arq); fread(&ncl,4,1,arq);

    int vettemp[]={nsv,nll,ncl};
    if (i==0) a.create(3,vettemp);
    else if (nll!=a.size[1] || ncl!=a.size[2]) erro("Erro le3dImg: Dimensoes de imagens diferentes");

    Mat_<FLT> f=fatia(a,i);
    int lcv,ccv;
    fread(&lcv,4,1,arq); fread(&ccv,4,1,arq);

    size_t lidos=fread(f.data,tam,nll*ncl,arq);
    if (lidos!=size_t(nll*ncl))
      erro("Erro le3dImg - Fim inesperado 3");
  }
  fclose(arq);
}

void imp3dImg(M3d_<FLT> a, string nome)
{ FILE* arq=fopen(nome.c_str(),"wb");
  if (arq==NULL) erro("Erro imp3dImg - Abertura de ",nome);
  if (setvbuf(arq,NULL,_IOFBF,maxbuf)!=0)
    erro("Erro imp3dImg - Faltou memoria setvbuf");

  char id[]="I3DFLT*\x1a";
  fwrite(id,1,8,arq);
  fwrite(&a.size[0],4,1,arq);

  int tam=sizeof(FLT);
  int zero=0;
  char st[]="IMGFLT*\x1a";
  for (int i=0; i<a.size[0]; ++i) {
    fwrite(st,1,8,arq);
    fwrite(&tam,4,1,arq);
    fwrite(&(a.size[1]),4,1,arq);
    fwrite(&(a.size[2]),4,1,arq);
    fwrite(&(zero),4,1,arq);
    fwrite(&(zero),4,1,arq);
    fwrite(a.data,tam,a.size[1]*a.size[2],arq);
  }
  fclose(arq);
}

} // namespace cek

